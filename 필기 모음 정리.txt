1. 데이터 분석

2.엑셀 vba

3. 자기소개서에 파이썬 배운거 무조건 쓰기

   내가 데이터 마이닝해서 파이썬을 이용해서 이 회사의 어떤 밸류를 높힐 수 있을지에 대해 어필

   어떤 상황이 닥쳐도 이걸 해보겠다고 준비를 했다는 것 어필

   더 존 이용해서 분개장을 돌려봤다.

  

 이제는 논문쓸 때 통계도 파이썬(텍스트 분석), R을 사용

 

4.재무 빅데이터 분석사(내년 6월 시험) -교재 11월, 12월에 나올 예정

  -기초 db-기초 데이터베이스(스키마, 쿼리 같은거), 기초 회계, 기초 통계(기본적인 회계분석, 평균분산 등), 파이썬, fraudit

  시간: 2시간 30분~3시간

  교재에 있는 문제만 풀어도 됨


 R, SQL, 파이썬

 

5.독학 할 때 모르는 거 stack overflow, practical business python

  심플하게 쓴 사람꺼 보기

  위키독스:점프투파이썬

  판다스 관련된 위키독스는 없음(stack에는 다 있음)
  
  
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------

  -------if문

1. if 조건문에서 : 으로 다음문 계속 수행하고 tap1번=스페이스바4번

  :(콜론)안찍으면 무조건 error

2. if랑 else는 들여쓰기를 맞춰야 한다. 
3. a = 120

    if a > 100 :   

       print("a는 100보다 크다.")

    else a <=100 :

       print("a는 100보다 작다.")

 
4. if와 elif의 차이: if는 조건, elif는 위에 조건을 뺀 것 중에서 조건에 해당하는 것
5. 상황을 잘 따져서 if 뒤에 elif를 쓸지 else를 쓸 지 if만 쓸 지 정해야 한다.
6. range (5)는 0부터 4까지의 숫자를 말한다.

 

------for문


7.for i in range (5) :      =        for i in range (0,5,1) :

    print (i)                              print (i)

 

 0 1 2 3 4

 

8. for i in range (0,5,2) :

    print (i)

    

 0

 2 

 4
 
9.for i in range (1,5,2) :로 하면 시작 포인트는 1, 마지막은 5, 단위는 2
10.  for  i  in [1,2,3,4,5] :

...    for  j  in range(i) :
...        print(j)
...    print()

 

  여기에서 마지막 print를 두번째 for안에 넣으면 또 달라진다.

  첫번째 for 반복 전 중간에 띄어쓰기가 생긴다.

--------list comprehension

11. [ 식 for 원소 in 리스트 if 문 ]
12. rpa 수업-파이썬 가능
13.>>> a = []

>>> for i in range(5) :
...    a.append(i)
...
>>> a
[0, 1, 2, 3, 4]              알아야 됨. 중요


14. list compre는 :(콜론)치지 않는다.
15. if만 있을 때는 맨뒤.  if와 else가 같이 있을 때는  for 앞에 넣는다. (암기!!!)


----------사용자 함수

16. 함수안에서 사용하는 변수(로칼변수) 함수밖에서 사용하는 변수(글로벌 변수)

    함수는 return 이라는 결과값이 나와야 한다.
17.함수(매개변수(=인자))
18. def 함수(a) :
    a = a + 1
    return a
    
    함수 (2)
    3
19. return을 안썼을 때. return을 알려준게 아니라 함수 func를 내놓은거라 나중에 후속적인 처리를 할 때 x가 들어오지 않는다.

   즉, 화면상에서만 4가 나온것이지 메모리에는  없다. return을 안해줘서.

    def func (x) :

    x = x + 1

    print(x)

    

    func(3)

    4

-------전역변수와 로컬변수

20. 지역변수와 로컬변수는 전혀 관계가 없다. (둘이 연관짓는 법)사례6
21. def func():
    global a
    a = a + 20
    return a
    
    func()
    120

    func()

    140

 ->글로벌 변수가 업데이트 된다.
-----------정규 표현식 x

22. 플루이딧

test.view()

test

<Table: 11 rows x 6 cols>

test[0]

<Record instance: [1, 1, 'A', '매도가능증권', 3.5, DateTime(2018, 1, 1, 0, 0)]>

list(test[0])

[1, 1, 'A', '매도가능증권', 3.5, DateTime(2018, 1, 1, 0, 0)]

test[0][3]

'매도가능증권'

test[0]['D']

'매도가능증권'

test['D'][0]

'매도가능증권'

23. 메뉴에서 data->stratify->by value에서 c를 그룹이라 치면 그룹별로 지정해준다.
24.그룹[1][0][3]  =  그룹[1][0]['D']
25. date -> table properties하면 새로 추가할 수 있음
26. 위에서 최대값 추가하고 아래 코딩하기

 for i in range (len(그룹)) :
    for j in range (len(그룹[i])) :
        그룹[i][j]['최대값'] = max (그룹[i]['E']) 

27. 

len(test)

11

test['D']

<Column instance: D>

max(test['E'])
28. file -> new table에서 새로운 테이블 추가. 

    format : #,###
29. <>하드디스크에 저장. 없으면 메모리에 올라와 있음. 그냥 끄면 사라짐. 저장 세이브에 넣어야 안날아감
30. file-> data improt wizard->file encoding에서 korean(cp949)

    left cell, right cell 이런거 설정x
31. csv는 시트개념이 없음
32. sort는 오름차순, 내림차순
33. filter expression : 입찰금액 > 1_000_000
34. export 엑셀로 저장
35. history 는 과거에 뭐했는지 나온다
36. analyze의 descriptive는 한번에 볼 수 있게 한다. 

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. 코드 굳이 어렵게 짜지 말고 데이터 베이스 공부같이 하기


2. join으로 교집합 구하기 detach할 때 join을 많이 쓴다. data->join->by value

 
3. fuzzy 퍼센트만큼 일치하는 것 찾기 <->정확하게 하려면 join

